/*
 * This is the Piano Tiles mini-game
 * In this mini-game, the user must click on the falling black tiles as quick as possible!
 * If the user mistakenly clicks on a white tile or the user lets a black tile reach past the bottom, the game will be over
 * Survive 1 minute and the user will be victorious, but beware, the # of tiles as well as speed will increase as time progresses
 */
package pianotiles;
import javax.swing.*; //import all swing methods
import java.awt.*; //import all graphics modules
import java.io.*; //import all java.io modules
import java.util.*; //import all java utils
import static java.lang.Thread.sleep; //import sleep modules
import javax.sound.sampled.*; //import all javax sound sampled modules

public class PianoTilesGame extends javax.swing.JPanel {
    ImageIcon black = new ImageIcon("black.png"); //create black image icon and store into variable black
    ImageIcon blank = new ImageIcon("white.png"); //create white image icon and store into variable blank
    static int miliseconds = 0; //Intialize static variable miliseconds to 0
    static int seconds = 0; //Intialize static variable seconds to 0
    static int minutes = 0; //Intialize static variable minutes to 0
    int warning = 0; //Intialize variable warning to 0 which will act as a 1 time warning once the black tiles reach the bottom tile
    static boolean state = true; //Intialize static boolean variable state to true which will serve as a tool to determine whether the game still continues


    /**
     * Creates new form PianoTilesGame
     */
    public PianoTilesGame() {
        this.setBackground(Color.white); //set background to white
        initComponents();
    }
    public static void main(String args[]) throws UnsupportedAudioFileException, IOException, LineUnavailableException { //main function, throw exceptions if filename not found
        JFrame frame = new JFrame("Piano Tiles"); //set frame name to piano tiles
        //Explain how the game works and the rules with pop up on entry
        JOptionPane.showMessageDialog(frame, "BOSS FIGHT: Rules/How to play:\nOnce you click play, a timer will start and you must survive 1 minute. \nPiano tiles will drop from the sky and it is your job to click them before they reach the bottom. \nBeware, the amount of tiles as well as speed will increase the further you go. \nClick 'ok' when you're ready, good luck!");
        //create panel object
        PianoTilesGame panel = new PianoTilesGame();
        //set frame size
        frame.setSize(panel.getSize());
        //set dimensions to 425 by 470 pixels
        frame.setSize(new Dimension(425, 470));
        //set frame to contain the panel
        frame.setContentPane(panel);
        //set frame visible
        frame.setVisible(true);
        //exit application on close
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        //play music, this music code is inspired by Bro Code on Youtube
         File file = new File("pirate.wav");  //set file object to take filename value
        AudioInputStream audioStream = AudioSystem.getAudioInputStream(file); //get audio stream of file
        Clip clip = AudioSystem.getClip(); //Clip the Audio System
        clip.open(audioStream); //Open the audio stream
        clip.start(); //start/play the clip/music
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        one = new javax.swing.JButton();
        seven = new javax.swing.JButton();
        six = new javax.swing.JButton();
        three = new javax.swing.JButton();
        ten = new javax.swing.JButton();
        thirteen = new javax.swing.JButton();
        four = new javax.swing.JButton();
        tweleve = new javax.swing.JButton();
        sixteen = new javax.swing.JButton();
        eleven = new javax.swing.JButton();
        nine = new javax.swing.JButton();
        five = new javax.swing.JButton();
        eight = new javax.swing.JButton();
        fourteen = new javax.swing.JButton();
        two = new javax.swing.JButton();
        fifteen = new javax.swing.JButton();
        play = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        minute = new javax.swing.JLabel();
        second = new javax.swing.JLabel();
        milisecond = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        status = new javax.swing.JTextField();
        exit = new javax.swing.JToggleButton();

        jLabel1.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 204, 204));
        jLabel1.setText("Piano Tiles");

        one.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oneActionPerformed(evt);
            }
        });

        seven.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sevenActionPerformed(evt);
            }
        });

        six.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sixActionPerformed(evt);
            }
        });

        three.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                threeActionPerformed(evt);
            }
        });

        ten.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tenActionPerformed(evt);
            }
        });

        thirteen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                thirteenActionPerformed(evt);
            }
        });

        four.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fourActionPerformed(evt);
            }
        });

        tweleve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tweleveActionPerformed(evt);
            }
        });

        sixteen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sixteenActionPerformed(evt);
            }
        });

        eleven.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                elevenActionPerformed(evt);
            }
        });

        nine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nineActionPerformed(evt);
            }
        });

        five.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fiveActionPerformed(evt);
            }
        });

        eight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eightActionPerformed(evt);
            }
        });

        fourteen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fourteenActionPerformed(evt);
            }
        });

        two.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                twoActionPerformed(evt);
            }
        });

        fifteen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fifteenActionPerformed(evt);
            }
        });

        play.setText("Play");
        play.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 255));
        jLabel3.setText("Timer");

        minute.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        minute.setForeground(new java.awt.Color(0, 51, 255));
        minute.setText("00:");

        second.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        second.setForeground(new java.awt.Color(0, 51, 255));
        second.setText("00:");

        milisecond.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        milisecond.setForeground(new java.awt.Color(0, 51, 255));
        milisecond.setText("00");

        jLabel2.setText("Status");

        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(nine, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ten, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(eleven, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(five, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(one, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(play, javax.swing.GroupLayout.Alignment.LEADING))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(six, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(two, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(thirteen, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(fourteen, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(seven, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(fifteen, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(three, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tweleve, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(eight, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(sixteen, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(four, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(status, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(87, 87, 87)
                                .addComponent(jLabel3))
                            .addComponent(exit))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(minute)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(second)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(milisecond))
                            .addComponent(jLabel1))))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(status, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(24, 24, 24))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(milisecond)
                                    .addComponent(jLabel3)
                                    .addComponent(minute)
                                    .addComponent(second))
                                .addGap(18, 18, 18)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(two, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(three, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(four, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(eight, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(sixteen, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(six, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(fourteen, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(fifteen, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(seven, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 12, Short.MAX_VALUE)
                        .addComponent(exit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(play)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(one, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(five, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ten, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(nine, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(thirteen, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(eleven, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tweleve, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    public static void playClick() throws UnsupportedAudioFileException, IOException, LineUnavailableException{ //click function. this function was inspired by Andrew Thomspon from StackOverFlow
        String soundName = "click.wav";  //set sound name to the filename
        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File(soundName).getAbsoluteFile()); //get file stream of the sound name
        Clip clip = AudioSystem.getClip(); //get clip of audio system
        clip.open(audioInputStream); //open the audio input stream
        clip.start(); //start playig the clip/music
    }
    private void fiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fiveActionPerformed
        // TODO add your handling code here:
        //play click sound effect
        try { //try play click
            playClick(); //playClick using playClick function
        }
        catch(Exception e) { //ensure no errors arise  
        }
        if (five.getIcon().toString().equals("black.png")) { //check if fifth tile is black
            five.setIcon(blank); //if it is, set to blank since it should turn back to white after clicked
        }
        else { //else
            status.setText("Dead"); //set status to dead since user clicked on non black tile
            state = false; //set state false ending the game
        }
    }//GEN-LAST:event_fiveActionPerformed

    private void nineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nineActionPerformed
        // TODO add your handling code here:
        //play click sound effect
        try { //try play click
            playClick(); //playClick using playClick function
        }
        catch(Exception e) { //ensure no errors arise  
        }
        if (nine.getIcon().toString().equals("black.png")) { //check if the tile is black
            nine.setIcon(blank);//if it is, set to blank since it should turn back to white after clicked
        }
        else { //else
            status.setText("Dead");//set status to dead since user clicked on non black tile
            state = false; //set state false ending the game
        }
    }//GEN-LAST:event_nineActionPerformed
    public static int randomInteger(int min, int max) { //This function generates a random number from nin to max and was inspired by Charith Jaysanka from StackOverFlow
         //Create random object
        Random rand = new Random();
        //get random number from min to max and store value into variable randomNun
        int randomNum = rand.nextInt((max - min) + 1) + min;
        //return randomNum
        return randomNum;
    }
    public void placeBlackTile() { //This function gets a random number using the random function and places a boulder at a random position from 1-5
        boolean placed = false;
        while (placed == false) {
            int num = randomInteger(1,4); //Get random number from 1-5 using randomInteger function and assign value to variable num
            switch (num) { //Use switch case with num passed in 
                case 1: //If num equals 1
                    if (!five.getIcon().toString().equals("black.png")) {
                        one.setIcon(black); //set the first image icon to boulder
                        placed = true; //set placed to true
                    }
                    break; //Break out of switch case
                case 2: //If num equals 2
                    if (!six.getIcon().toString().equals("black.png")) {
                        two.setIcon(black); //set the first image icon to boulder
                        placed = true; //set placed to true
                    }
                    break; //Break out of switch case
                case 3: //If num equals 3
                    if (!seven.getIcon().toString().equals("black.png")) {
                        three.setIcon(black); //set the first image icon to boulder
                        placed = true;//set placed to true
                    }
                    break; //Break out of switch case
                case 4: //If num equals 4
                    if (!eight.getIcon().toString().equals("black.png")) {
                        four.setIcon(black); //set the first image icon to boulder
                        placed = true;//set placed to true
                    }
                    break; //Break out of switch case
            }
        }
    }
    public ArrayList<Integer> findBlackTileLocations() { //This function determines the location of the boulders
        ArrayList<Integer> blackTileLocations = new ArrayList<Integer>(); //Intialize arrayList blackTileLocations 
        if (one.getIcon().toString().equals("black.png")) { //Check if the first icon equals the boulder by checking if the icon address equals black.png
            blackTileLocations.add(1); //If the image is a black, add the number to the arrayList notifying that the first image has a boulder
        }
        if (two.getIcon().toString().equals("black.png")) { //Check if the second icon had a boulder
            blackTileLocations.add(2); //If the image is a black, add the number to the arrayList notifying that the first image has a boulder
        }

        if (three.getIcon().toString().equals("black.png")) { //Check if the third icon had a boulder
            blackTileLocations.add(3); //If the image is a black, add the number to the arrayList notifying that the first image has a boulder
        }
        if (four.getIcon().toString().equals("black.png")) { //Check if the fourth icon had a boulder
            blackTileLocations.add(4); //If the image is a black, add the number to the arrayList notifying that the first image has a boulder
        }
        if (five.getIcon().toString().equals("black.png")) { //Check if the fifth icon had a boulder
            blackTileLocations.add(5); //If the image is a black, add the number to the arrayList notifying that the first image has a boulder
        }
        if (six.getIcon().toString().equals("black.png")) { //Check if the sixth icon had a boulder
            blackTileLocations.add(6); //If the image is a black, add the number to the arrayList notifying that the first image has a boulder
        }
        if (seven.getIcon().toString().equals("black.png")) { //Check if the seveneth icon had a boulder
            blackTileLocations.add(7); //If the image is a black, add the number to the arrayList notifying that the first image has a boulder
        }
        if (eight.getIcon().toString().equals("black.png")) { //Check if the eighth icon had a boulder
            blackTileLocations.add(8); //If the image is a black, add the number to the arrayList notifying that the first image has a boulder
        }
        if (nine.getIcon().toString().equals("black.png")) { //Check if the ninth icon had a boulder
            blackTileLocations.add(9); //If the image is a black, add the number to the arrayList notifying that the first image has a boulder
        }
        if (ten.getIcon().toString().equals("black.png")) { //Check if the tenth icon had a boulder
            blackTileLocations.add(10); //If the image is a black, add the number to the arrayList notifying that the first image has a boulder
        }
        if (eleven.getIcon().toString().equals("black.png")) { //Check if the eleventh icon had a boulder
            blackTileLocations.add(11); //If the image is a black, add the number to the arrayList notifying that the first image has a boulder
        }
        if (tweleve.getIcon().toString().equals("black.png")) { //Check if the tweleveth icon had a boulder
            blackTileLocations.add(12); //If the image is a black, add the number to the arrayList notifying that the first image has a boulder
        }
        if (thirteen.getIcon().toString().equals("black.png")) { //Check if the thirteenth icon had a boulder
            blackTileLocations.add(13); //If the image is a black, add the number to the arrayList notifying that the first image has a boulder
        }
        if (fourteen.getIcon().toString().equals("black.png")) { //Check if the fourteenth icon had a boulder
            blackTileLocations.add(14); //If the image is a black, add the number to the arrayList notifying that the first image has a boulder
        }
        if (fifteen.getIcon().toString().equals("black.png")) { //Check if the fifteenth icon had a boulder
            blackTileLocations.add(15); //If the image is a black, add the number to the arrayList notifying that the first image has a boulder
        }
        if (sixteen.getIcon().toString().equals("black.png")) { //Check if the sixteenth icon had a boulder
            blackTileLocations.add(16); //If the image is a black, add the number to the arrayList notifying that the first image has a boulder
        }  
        //return the arrayList blackTileLocations which contains all the indexes of images that contain boulders
        return blackTileLocations;
    }
    public void moveBlackTiles() {
        ArrayList<Integer> blackTileLocation = new ArrayList<Integer>(); //Intialize arrayList blackTileLocation to hold type Integer
        blackTileLocation = findBlackTileLocations(); //assign blackTileLocation to return value of function findBlacktileLocations which will give all locations of black tiles
        for (int num: blackTileLocation) { //loop through all black tiles
            switch (num) { //switch case with each black tile number passed in 
                case 1: //if num equas 1
                    one.setIcon(blank); //set first icon blank
                    five.setIcon(black);//set fifth icon to black
                    break;//break
                case 2: //If num equals 2
                    two.setIcon(blank); //set the second icon blank
                    six.setIcon(black);//set the six icon to black
                    break;//break
                case 3: //If num equals 3
                    three.setIcon(blank);//set the third icon blank
                    seven.setIcon(black);//set the seventh icon to black
                    break;//break
                case 4: //If num equals 4
                    four.setIcon(blank); //set the foruth icon blank
                    eight.setIcon(black);//set the eighth icon to black
                    break;
                case 5: //If num equals 5
                    five.setIcon(blank); //set the fifthicon blank
                    nine.setIcon(black); //set the ninth icon to black
                    break;//break
                case 6: //If num equals 6
                    six.setIcon(blank); //set the sixth icon blank
                    ten.setIcon(black); //set the tenth icon to black
                    break;//break
                case 7: //If num equals 7
                    seven.setIcon(blank); //set the sevneth icon blank
                    eleven.setIcon(black);//set the eleventh icon to black
                    break;//break
                case 8: //If num equals 8
                    eight.setIcon(blank); //set the eight icon blank
                    tweleve.setIcon(black);//set the tweleveth icon to black
                    break;//break
                case 9://If num equals 9
                    nine.setIcon(blank); //set the ninth icon blank
                    thirteen.setIcon(black);//set the thirteenth icon to black
                    break;//break
                case 10: //If num equals 10
                    ten.setIcon(blank); //set the tenth icon blank
                    fourteen.setIcon(black); //set the fourteenth icon to black
                    break; //break
                case 11: //If num equals 11
                    eleven.setIcon(blank); //set the televenth icon blank
                    fifteen.setIcon(black);  //set the fifteenth icon to the boulder as it lises directly beneath
                    break; //break
                case 12: //If num equals 12
                    tweleve.setIcon(blank); //set the twelve icon blank
                    sixteen.setIcon(black);//set the sixteenth icon to black
                    break; //break
                case 13: //If num equals 13
                    thirteen.setIcon(blank); //set icon blank since its the last level and the tile disappears
                    break; //break
                case 14: //If num equals 14
                    fourteen.setIcon(blank); //set icon blank since its the last level and the tile disappears
                    break; //break
                case 15: //If num equals 15
                    fifteen.setIcon(blank); //set icon blank since its the last level and the tile disappears
                    break; //break
                case 16: //If num equals 16
                    sixteen.setIcon(blank); //set icon blank since its the last level and the tile disappears
                    break; //break
            }
        }
    }
    public boolean checkTileFoulLoss() {
        if (thirteen.getIcon().toString().equals("black.png")) { //check if tile equals black
            return true; //return true since the tile on the last level is about to disappear and the user will lose
        }
        else if (fourteen.getIcon().toString().equals("black.png")) { //check if tile equals black
            return true; //return true since the tile on the last level is about to disappear and the user will lose
        }
        else if (fifteen.getIcon().toString().equals("black.png")) { //check if tile equals black
            return true; //return true since the tile on the last level is about to disappear and the user will lose
        }
        else if (sixteen.getIcon().toString().equals("black.png")) { //check if tile equals black
            return true; //return true since the tile on the last level is about to disappear and the user will lose
        }
        else { //else
            return false;//return false
        }
    }
    private void playActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playActionPerformed
        // TODO add your handling code here:
        status.setText("Alive"); //set status to alive
        //set all buttons to blank
        one.setIcon(blank);
        two.setIcon(blank);
        three.setIcon(blank);
        four.setIcon(blank);
        five.setIcon(blank);
        six.setIcon(blank);
        seven.setIcon(blank);
        eight.setIcon(blank);
        nine.setIcon(blank);
        ten.setIcon(blank);
        eleven.setIcon(blank);
        tweleve.setIcon(blank);
        thirteen.setIcon(blank);
        fourteen.setIcon(blank);
        fifteen.setIcon(blank);
        sixteen.setIcon(blank);
        //Intialize variables miliseconds seconds and minutes to 0
        miliseconds = 0;
        seconds = 0;
        minutes = 0;
        //intialize state to true
        state = true;
        //Create thread with time sleep class, this will be the stopwatch, this stopwatch was inspired by Coding Time on youtube
        Thread t = new Thread()
        {
            public void run() {  //Continously run
                for(;;) { //Infinteltly loop
                    if (state==true) { //Check if the game is still running by checking if state is true
                        try { //try
                            sleep(1); //sleep 1 milisecond
                            //The goal of these if statements on seconds is to progressively increase the speed or the amount of tiles spawned making the difficuly harder as the game progresses
                            if (seconds < 5) { //Check if seconds is less than 5, meaning early stage of game
                                if (miliseconds % 1000 == 0) { //check if miliseconds divisble by 1000 meaning 1 second passed
                                    moveBlackTiles(); //move all black tiles, I move first to ensure that tiles spawned at the top don't instantly drop down
                                    placeBlackTile(); //place a black tile
                                }
                            }
                            else if (seconds < 15) { //check if seconds is less than 15
                                if (miliseconds % 700 == 0) { //check if miliseconds divisble by 700 meaning every .7seconds do this
                                    moveBlackTiles(); //move black tile
                                    int randomNumber = randomInteger(1,2); //generate random number from 1-2
                                    for (int i = 0; i < randomNumber; i++) { //loop random num amount of times
                                        placeBlackTile(); //place black tile
                                    }
                                }
                            }
                            else if (seconds < 20) {  //check if seconds is less than 20
                                if (miliseconds % 650 == 0) { //check if miliseconds divisble by 650 meaning every .65seconds do this
                                    moveBlackTiles(); //move black tiles
                                    placeBlackTile(); //place black tile
                                    placeBlackTile(); //place black tile
                                }
                            }
                            else if (seconds < 30) { //check if seconds is less than 30
                                if (miliseconds % 750 == 0) { //check if miliseconds divisble by 750 meaning every .75seconds do this
                                    moveBlackTiles(); //move black tiles
                                    int randomNumber = randomInteger(1,5); //get random number from 1-5
                                    for (int i = 0; i < randomNumber; i++) { //loop random num amount of times
                                        placeBlackTile(); //place black tile
                                    }
                                       
                                }
                            }
                            else if (seconds < 40) { //check if seconds is less than 40
                                if (miliseconds % 600 == 0) { //check if miliseconds divisble by 600 meaning every .6seconds do this
                                    moveBlackTiles(); //move all black tiles
                                    int randomNumber = randomInteger(1,5); //get random number from 1-5
                                    for (int i = 0; i < randomNumber; i++) { //loop random num amount of times
                                        placeBlackTile(); //place black tile
                                    }
                                }
                            }
                            else if (seconds < 50) { //check if seconds is less than 50
                                if (miliseconds % 650 == 0) { //check if miliseconds divisble by 650 meaning every .65seconds do this
                                    moveBlackTiles(); //move all black tiles
                                    int randomNumber = randomInteger(2,5); //get random num from 2-5
                                    for (int i = 0; i < randomNumber; i++) { //loop random num amount of times
                                        placeBlackTile(); //place black tile
                                    }
                                }
                            }
                            else if (seconds < 54) { //check if seconds is less than 54
                                if (miliseconds % 650 == 0) { //check if miliseconds divisble by 650 meaning every .65seconds do this
                                    moveBlackTiles(); //move all black tiles
                                    int randomNumber = randomInteger(3,5); //get random number from 3-5
                                    for (int i = 0; i < randomNumber; i++) { //loop random num amount of times
                                        placeBlackTile(); //place black tile
                                    }
                                }
                            }
                            else { //else meaning the time is 54 seconds+
                                if (miliseconds % 600 == 0) { ////check if miliseconds divisble by 600 meaning every .6seconds do this
                                    moveBlackTiles(); //move all black tiles
                                    int randomNumber = randomInteger(3,5); //get random number from 4-5
                                    for (int i = 0; i < randomNumber; i++) { //loop random num amount of times
                                        placeBlackTile(); //place black tile
                                    }
                                }
                            }
                            if (miliseconds >= 1000) { //if milseconds goes past 1000, set miliseconds to 0 and increment a second
                                miliseconds = 0; //set miliseconds to 0
                                seconds++; //increment second 
                                if (checkTileFoulLoss() == true) { //check if there are any fouls meaning any black tiles reached the bottom
                                    warning++; //if any black tiles reached the last level, incremenet warning meaning if it goes 1 tile more down, the user will lose
                                    if (warning == 2) { //check if warning is 2 meaning the black tile has vanished at the bottom
                                        state = false; //set state to false since the user let the black tile go all the way down
                                        status.setText("Lost"); //set status to lost
                                    } 
                                }
                            }
                            //once seconds reaches past 60
                            if (seconds >= 60) { //check if seconds reached 60
                                seconds = 0; //set seconds to 0
                                minutes++; //add one to minutes
                                state = false; //Once 1 minute is reached, end program
                                status.setText("Winner"); //set status to winner as the user survived a minute
                            }
                            //display the timer by setting the three labels to the corresponding times every milisecond
                            milisecond.setText(" : " + "" + miliseconds); 
                            second.setText(" : " + seconds);
                            minute.setText("" + minutes);
                            miliseconds++; //increment the miliseconds
                        }
                        catch (Exception e) { //ensure no errors pop up
                            
                        }
                        
                    }
                    else { //else break if the state is false
                        break; //break out loop
                    }
                }
            }
        };
        t.start(); //start timer
    }//GEN-LAST:event_playActionPerformed

    private void oneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oneActionPerformed
        // TODO add your handling code here:
         //play click sound each time the button is clicked
        try { //try play click
            playClick(); //playClick using playClick function
        }
        catch(Exception e) { //ensure no errors arise  
        }
        if (one.getIcon().toString().equals("black.png")) { //check if the tile is black
            one.setIcon(blank); //if it is, set to blank since it should turn back to white after clicked
        }
        else {
            status.setText("Dead");//set status to dead since user clicked on non black tile
            state = false;//set state false ending the game
        }
    }//GEN-LAST:event_oneActionPerformed

    private void twoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_twoActionPerformed
        // TODO add your handling code here:
         //play click sound each time the button is clicked
         try { //try play click
            playClick(); //playClick using playClick function
        }
        catch(Exception e) { //ensure no errors arise  
        }
        if (two.getIcon().toString().equals("black.png")) {//check if the tile is black
            two.setIcon(blank); //if it is, set to blank since it should turn back to white after clicked
        }
        else {
            status.setText("Dead");//set status to dead since user clicked on non black tile
            state = false;//set state false ending the game
        }
    }//GEN-LAST:event_twoActionPerformed

    private void threeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_threeActionPerformed
        // TODO add your handling code here:
        //Play click sound effect
        try { //try play click
            playClick(); //playClick using playClick function
        }
        catch(Exception e) { //ensure no errors arise  
        }
        if (three.getIcon().toString().equals("black.png")) {//check if the tile is black
            three.setIcon(blank); //if it is, set to blank since it should turn back to white after clicked
        }
        else {
            status.setText("Dead");//set status to dead since user clicked on non black tile
            state = false;//set state false ending the game
        }
    }//GEN-LAST:event_threeActionPerformed

    private void fourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fourActionPerformed
        // TODO add your handling code here:
         //play click sound each time the button is clicked
        try { //try play click
            playClick(); //playClick using playClick function
        }
        catch(Exception e) { //ensure no errors arise  
        }
        if (four.getIcon().toString().equals("black.png")) {//check if the tile is black
            four.setIcon(blank); //if it is, set to blank since it should turn back to white after clicked
        }
        else {
            status.setText("Dead");//set status to dead since user clicked on non black tile
            state = false;//set state false ending the game
        }
    }//GEN-LAST:event_fourActionPerformed

    private void sixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sixActionPerformed
        // TODO add your handling code here:
         //play click sound each time the button is clicked
        try { //try play click
            playClick(); //playClick using playClick function
        }
        catch(Exception e) { //ensure no errors arise  
        }
        if (six.getIcon().toString().equals("black.png")) {//check if the tile is black
            six.setIcon(blank); //if it is, set to blank since it should turn back to white after clicked
        }
        else {
            status.setText("Dead");//set status to dead since user clicked on non black tile
            state = false;//set state false ending the game
        }
    }//GEN-LAST:event_sixActionPerformed

    private void sevenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sevenActionPerformed
        // TODO add your handling code here:
         //play click sound each time the button is clicked
        try { //try play click
            playClick(); //playClick using playClick function
        }
        catch(Exception e) { //ensure no errors arise  
        }
        if (seven.getIcon().toString().equals("black.png")) {//check if the tile is black
            seven.setIcon(blank); //if it is, set to blank since it should turn back to white after clicked
        }
        else {
            status.setText("Dead");//set status to dead since user clicked on non black tile
            state = false;//set state false ending the game
        }
    }//GEN-LAST:event_sevenActionPerformed

    private void eightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eightActionPerformed
        // TODO add your handling code here:
         //play click sound each time the button is clicked
        try { //try play click
            playClick(); //playClick using playClick function
        }
        catch(Exception e) { //ensure no errors arise  
        }
        if (eight.getIcon().toString().equals("black.png")) {//check if the tile is black
            eight.setIcon(blank); //if it is, set to blank since it should turn back to white after clicked
        }
        else {
            status.setText("Dead");//set status to dead since user clicked on non black tile
            state = false;//set state false ending the game
        }
    }//GEN-LAST:event_eightActionPerformed

    private void tenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tenActionPerformed
        // TODO add your handling code here:
         //play click sound each time the button is clicked
        try { //try play click
            playClick(); //playClick using playClick function
        }
        catch(Exception e) { //ensure no errors arise  
        }
        if (ten.getIcon().toString().equals("black.png")) {//check if the tile is black
            ten.setIcon(blank); //if it is, set to blank since it should turn back to white after clicked
        }
        else {
            status.setText("Dead");//set status to dead since user clicked on non black tile
            state = false;//set state false ending the game
        }
    }//GEN-LAST:event_tenActionPerformed

    private void elevenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_elevenActionPerformed
        // TODO add your handling code here:
         //play click sound each time the button is clicked
        try { //try play click
            playClick(); //playClick using playClick function
        }
        catch(Exception e) { //ensure no errors arise  
        }
        if (eleven.getIcon().toString().equals("black.png")) {//check if the tile is black
            eleven.setIcon(blank); //if it is, set to blank since it should turn back to white after clicked
        }
        else {
            status.setText("Dead");//set status to dead since user clicked on non black tile
            state = false;//set state false ending the game
        }
    }//GEN-LAST:event_elevenActionPerformed

    private void tweleveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tweleveActionPerformed
        // TODO add your handling code here:
         //play click sound each time the button is clicked
        try { //try play click
            playClick(); //playClick using playClick function
        }
        catch(Exception e) { //ensure no errors arise  
        }
        if (tweleve.getIcon().toString().equals("black.png")) {//check if the tile is black
            tweleve.setIcon(blank); //if it is, set to blank since it should turn back to white after clicked
        }
        else {
            status.setText("Dead");//set status to dead since user clicked on non black tile
            state = false;//set state false ending the game
        }
    }//GEN-LAST:event_tweleveActionPerformed

    private void thirteenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_thirteenActionPerformed
        // TODO add your handling code here:
         //play click sound each time the button is clicked
        try { //try play click
            playClick(); //playClick using playClick function
        }
        catch(Exception e) { //ensure no errors arise  
        }
        if (thirteen.getIcon().toString().equals("black.png")) {//check if the tile is black
            thirteen.setIcon(blank); //if it is, set to blank since it should turn back to white after clicked
        }
        else {
            status.setText("Dead");//set status to dead since user clicked on non black tile
            state = false;//set state false ending the game
        }
    }//GEN-LAST:event_thirteenActionPerformed

    private void fourteenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fourteenActionPerformed
        // TODO add your handling code here:
         //play click sound each time the button is clicked
        try { //try play click
            playClick(); //playClick using playClick function
        }
        catch(Exception e) { //ensure no errors arise  
        }
        if (fourteen.getIcon().toString().equals("black.png")) {//check if the tile is black
            fourteen.setIcon(blank); //if it is, set to blank since it should turn back to white after clicked
        }
        else {
            status.setText("Dead");//set status to dead since user clicked on non black tile
            state = false;//set state false ending the game
        }
    }//GEN-LAST:event_fourteenActionPerformed

    private void fifteenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fifteenActionPerformed
        // TODO add your handling code here:
         //play click sound each time the button is clicked
        try { //try play click
            playClick(); //playClick using playClick function
        }
        catch(Exception e) { //ensure no errors arise  
        }
        if (fifteen.getIcon().toString().equals("black.png")) {//check if the tile is black
            fifteen.setIcon(blank); //if it is, set to blank since it should turn back to white after clicked
        }
        else {
            status.setText("Dead");//set status to dead since user clicked on non black tile
            state = false;//set state false ending the game
        }
    }//GEN-LAST:event_fifteenActionPerformed

    private void sixteenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sixteenActionPerformed
        // TODO add your handling code here:
         //play click sound each time the button is clicked
        try { //try play click
            playClick(); //playClick using playClick function
        }
        catch(Exception e) { //ensure no errors arise  
        }
        if (sixteen.getIcon().toString().equals("black.png")) {//check if the tile is black
            sixteen.setIcon(blank); //if it is, set to blank since it should turn back to white after clicked
        }
        else {
            status.setText("Dead");//set status to dead since user clicked on non black tile
            state = false;//set state false ending the game
        }
    }//GEN-LAST:event_sixteenActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        // TODO add your handling code here:
        System.exit(0); //exit out of system wants exit button is pressed
    }//GEN-LAST:event_exitActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton eight;
    private javax.swing.JButton eleven;
    private javax.swing.JToggleButton exit;
    private javax.swing.JButton fifteen;
    private javax.swing.JButton five;
    private javax.swing.JButton four;
    private javax.swing.JButton fourteen;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel milisecond;
    private javax.swing.JLabel minute;
    private javax.swing.JButton nine;
    private javax.swing.JButton one;
    private javax.swing.JButton play;
    private javax.swing.JLabel second;
    private javax.swing.JButton seven;
    private javax.swing.JButton six;
    private javax.swing.JButton sixteen;
    private javax.swing.JTextField status;
    private javax.swing.JButton ten;
    private javax.swing.JButton thirteen;
    private javax.swing.JButton three;
    private javax.swing.JButton tweleve;
    private javax.swing.JButton two;
    // End of variables declaration//GEN-END:variables
}
